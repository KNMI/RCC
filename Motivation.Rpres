Motivation for the Research Code of Conduct (RCC)
========================================================
author: The RCC team (more later)
date: 1. June 2017
autosize: true

Motivational examples
========================================================

- my own paper
- KNMI'14 scenario brochure
- Earthquake hazard
- many more ...

Aim
========================================================

With the research code of conduct (RCC) we set standards, that should **help**
increase the reproducibility and reusability of the departmental research.

- reproducibility: you / your colleagues / others can reproduce your study
- reusability: you / your colleagues / others can reuse your methods (without a
  lot of copying & pasting)

It is not necessary to reach everything immediately, but the direction is clear.

The current version of the RCC can be found at <https://github.com/KNMI/RCC>.

Contents
========================================================

- Version control
- Repository management
- Data management
- Writing
- Coding standards
- Additional sugar

Version control
========================================================
incremental: true

Do you recognize this?

revision.doc<br>
final.doc<br>
final2.doc

Then you are doing it wrong! It should be:

manuscript_v01.doc<br>
manuscript_v02.doc<br>
manuscript_v99.doc

Or **much** better use a real version control system, aka **git**!

Git
========================================================
The core of reproducibility  is a working version control system.

Version control (aka git for us) should be implemented right from the start.

If you don't know what git is, check the [git basics](https://git-scm.com/videos).

A version control system also works as a kind of lab book, e.g.
[RCC commits](https://github.com/KNMI/RCC/commits/master).

Recommendations
========================================================

Public repos should be stored on the [KNMI github](https://github.com/KNMI) account

Private repos (for a limited amount of users) can be obtained for free at
[bitbucket](https://bitbucket.org/product)

If your supervisor does not use git yet get a git buddy, e.g. any
[member](https://github.com/orgs/KNMI/people) of the KNMI github account

Repository management
========================================================

Try to structure your repository or research project folder.
Within a repository you will encounter frequently:

 - data (for all the data)
 - figures (for your plots)
 - scripts
 - R (if you define R functions)
 - src (for source code)
 - tests

Data management
========================================================

For external data create a data management plan, see e.g.
(http://www.wur.nl/nl/show/What-is-a-Data-Management-Plan.htm)

If not, the following rule still applies:

**Try not to copy and paste data and instead use scripts to obtain data**
(and keep those scripts under version control).

This looks simpler than it is, but if we work together that should become easier
over time.
Feel free to consult [us](https://github.com/orgs/KNMI/teams/rrr) if you
experience difficulties.

Writing
========================================================

Git is not only for programmers, also the process to a report or published
paper is long and many changes will be made to the initial document, if these
are not documented a lot of knowledge will disappear.

We encourage the use of traceable files, e.g. Latex or (variants of) markdown.
Modern Latex online editors allow to track document history and collaborative
writing (e.g., https://www.sharelatex.com/).
Word files can be set under version control, but changes between different
versions can not be shown.
If your supervisor does not use git yet, he can make annotations in a pdf
document, e.g using Adobe Acrobat.

Coding standards
========================================================

If you do program functions or scripts, it is very useful to use some consitent
coding style:

- Python: [PEP8](https://www.python.org/dev/peps/pep-0008/)
- R: [tidyverse](http://adv-r.had.co.nz/Style.html) or [google](https://google.github.io/styleguide/Rguide.xml)

More generally we think it is useful to write functions, that can be used as a
module or package within several scripts.
This increases the reusability and decreases the number of potential errors.

Sugar on top?
========================================================

If you want to do even more to increase the reproducibility and reusability of
your project.
Have a look at the following links:

- [docker](https://www.docker.com/) for even more reproducibility
- [provenance](https://www.w3.org/TR/prov-dm/) Introduction to the concept of provenance and traceability according to W3C.
- [dispel4py](https://github.com/dispel4py/dispel4py) processing library and workflows (https://github.com/aspinuso/wps_workflow)
- [jupyter](https://jupyter.org/) for live notebooks
- [travis CI](https://travis-ci.org/) for automatic checking
- [doxygen](https://en.wikipedia.org/wiki/Doxygen) for easy documentation
  / R-users should have a look at [roxygen2](https://cran.r-project.org/web/packages/roxygen2/index.html)

The RRR team
========================================================
Needs fresh blood as some people are leaving ...


Slide With Code
========================================================

```{r}
summary(cars)
```

Slide With Plot
========================================================

```{r, echo=FALSE}
plot(cars)
```
